   # This is a basic workflow to help you get started with Actions

name: First Cron Job

       # Controls when the workflow will run
on:
  push: 
    branches: [main]
  repository_dispatch:
    types: Run-Auto-Test

  # Triggers the workflow every 5 minutes
  # schedule:
  #   - cron: "*/5 * * * *"

     # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "cron"
  # cron:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     - uses: actions/checkout@v2
  #     # Runs a single command using the runners shell
  #     - name: Run a one-line script
  #       run: echo Hello, world!
  #     - name: Check date
  #       run: date


  run-automation-test:
    runs-on: ubuntu-20.04
    permissions: write-all
    steps:
    - uses: actions/checkout@v2
    
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      with:
       # Specify connection via URL (replaces server_address, server_port, secure,
       # username and password)
       #
       # Format:
       #
       #  * smtp://user:password@server:port
       #  * smtp+starttls://user:password@server:port
#        connection_url: ${{secrets.GMAIL}}
       # Required mail server address if not connection_url:
       server_address: smtp.gmail.com
       # Server port, default 25:
       server_port: 465
       # Optional whether this connection use TLS (default is true if server_port is 465)
       secure: true
       # Optional (recommended): mail server username:
       username: ${{secrets.MAIL_USERNAME}}
       # Optional (recommended) mail server password:
       password: ${{secrets.MAIL_PASSWORD}}
       # Required mail subject:
       subject: Github Actions job result
       # Required recipients' addresses:
       to: phuongnam8497@gmail.com
       # Required sender full name (address can be skipped):
       from: Luke Skywalker # <user@example.com>

    - name: Set up JDK 14
      uses: actions/setup-java@v1
      with:
        java-version: 14
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build
      run: |
        mvn --batch-mode -DskipTests package
    - name: Test
      run: |
        mvn clean -Dtest=LoginTests test
      continue-on-error: true
#     - name: Test Report
#       uses: dorny/test-reporter@v1
#       if: always()
#       with:
#         name: Test Results
#         path: ${{ github.workspace }}/target/surefire-reports/junitreports/*.xml
#         reporter: java-junit
#         java-version: 14
#         fail-on-error: true
    - name: Upload test result as an artifact
      if: always()
      uses: actions/upload-artifact@v1
      with: 
        name: allure-results
        path: allure-results
        
    - name: Check allure-results
      run: |
        zip -r allure-results.zip allure-results
        ls -la
    
    - name: Upload and Generate allure-results report
      run: |
        uuid=$(curl --location --request POST 'http://44.211.206.10:8080/api/result'  --form 'allureResults=@allure-results.zip;type=application/zip' | cut -d ":" -f3 | cut -d '"' -f2)
        echo ${uuid}
        curl --location --request POST 'http://44.211.206.10:8080/api/report' \
         --header 'Content-Type: application/json' \
         --data-raw '{
           "reportSpec": {
             "path": [
               "master",
               "666"
             ],
             "executorInfo": {
               "buildName": "#666"
             }
           },
           "results": [
             "'"${uuid}"'"
           ],
           "deleteResults": false
         }'
        
#     - name: Get Allure history
#       uses: actions/checkout@v2
#       if: always()
#       continue-on-error: true
#       with:
#        ref: gh-pages
#        path: gh-pages
       
#     - name: Allure Report action from marketplace
#       uses: simple-elf/allure-report-action@master
#       if: always()
#       id: allure-report
#       with:
#        allure_results: allure-results
#        gh_pages: gh-pages
#        allure_report: allure-report
#        allure_history: allure-history  
 
#     - name: Deploy report to Github Pages
#       if: always()
#       uses: peaceiris/actions-gh-pages@v2
#       env:
#        PERSONAL_TOKEN: ${{ secrets.TOKEN }}
#        PUBLISH_BRANCH: gh-pages
#        PUBLISH_DIR: allure-history
       
       
